{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SARW,SAAEC,GACnBA,EAAEC,iBACFN,GAAe,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACvCJ,EAAc,KAKd,SACI,uBAAOK,KAAK,OACXC,MAAQP,EACRQ,SAfiB,SAACL,GACvBF,EAAeE,EAAEM,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCCXO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIT,EAAkB,EAAlBA,IAAKU,EAAa,EAAbA,MAGpC,OADAI,QAAQC,IAAKN,EAAIT,EAAKU,GAElB,sBAAKM,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAMR,IACrB,4BAAKA,QCJJS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAIvB,ECLwB,SAAEA,GAC1B,MAA0BZ,mBAAS,CAC/BmB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAfAC,qBAAW,WACP1B,EAASC,GACJ0B,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEd,UAGZ,CAAEtB,IAGEuB,EDnB0BM,CAAc7B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAGrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAElDsB,GAAW,6CAEb,qBAAKJ,UAAU,YAAf,SACUL,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADCA,EAAIC,aEcvBmB,EA9BM,WAIjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAKA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAEQ4C,EAAWtB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MChBvCgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.05c473b9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories }) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        setCategories( cats => [inputValue, ...cats]);\r\n        setinputValue('');\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input type=\"text\"\r\n             value={ inputValue }\r\n             onChange={ handleInputChange }/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n    export const getGifs = async( category ) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=ac754UGsvp0Km52oJq0STF72Xbj9Pw1X`;\r\n\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react';\r\n\r\nexport const GifGridItem = ( { id, url, title } ) => {\r\n\r\n    console.log( id, url, title )\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n\r\n    \r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p>Cargando....</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                    { images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img } />\r\n                    )) }\r\n                    </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    //Recibe Dos Argumentos,\r\n    //1.- una función  que es la función a ejecutar\r\n    //2.- Un arreglo de dependencias, si se envia un arreglo vacio, la función solo se ejecuta una vez.\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false,\r\n                    })\r\n                }, 3000)\r\n\r\n            } );\r\n    }, [ category ]); \r\n\r\n\r\n    return state; //{ data: [], loading: true }\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    \r\n    //const categories = ['One punch', 'Pokemon', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One punch']);\r\n\r\n   // const handleAdd = () => setCategories([...categories, 'Hunter X']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr></hr>\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                            <GifGrid \r\n                                key= { category }\r\n                                category= { category }\r\n                            />\r\n                        )\r\n                    )\r\n\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();"],"sourceRoot":""}